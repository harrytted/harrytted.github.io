<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python列表底层原理</title>
    <link href="/2023/06/13/python%E5%88%97%E8%A1%A8%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <url>/2023/06/13/python%E5%88%97%E8%A1%A8%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="深入理解-Python-列表底层原理"><a href="#深入理解-Python-列表底层原理" class="headerlink" title="深入理解 Python 列表底层原理"></a>深入理解 Python 列表底层原理</h1><h2 id="列表介绍"><a href="#列表介绍" class="headerlink" title="列表介绍"></a>列表介绍</h2><p>在python中，列表(List)可以说是使用最多的数据结构了，是一个包含<strong>不同数据类型</strong>的元素集合。列表是<strong>有序的、可变的</strong>，而且其元素不需要是唯一的。列表支持元素的插入、删除、更新操作。</p><h2 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h2><p>列表实际上采用的就是数据结构中的顺序表【数组】，而且是一种采用分离式技术实现的<code>动态顺序表</code>。</p><p>Python中的列表基于<code>PyListObject</code>实现，<code>PyListObject</code>是一个变长对象（<strong>列表的长度随着元素的增加和删除而变长和变短</strong>），同时它还是一个可变对象（<strong>列表中的元素根据列表的操作而发生变化，内存大小动态的变化</strong>）</p><p>PyListObject的定义：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp">typedef <span class="hljs-keyword">struct</span> &#123;  <br>  <span class="hljs-meta"># 列表对象引用计数  </span><br>  <span class="hljs-built_in">int</span> ob_refcnt;    <br>  <span class="hljs-meta"># 列表类型对象        </span><br>  <span class="hljs-keyword">struct</span> _typeobject *ob_type;  <br>  <span class="hljs-meta"># 列表元素的长度  </span><br>  <span class="hljs-built_in">int</span> ob_size; <span class="hljs-comment">/* Number of items in variable part */</span>  <br>  <span class="hljs-meta"># 真正存放列表元素容器的指针，list[0] 就是 ob_item[0] </span><br>  PyObject **ob_item;  <br>  <span class="hljs-meta"># 当前列表可容纳的元素大小  </span><br>  Py_ssize_t allocated;  <br>&#125; PyListObject;<br></code></pre></td></tr></table></figure><p>除了通用对象都有的引用计数（<code>ob_refcnt</code>）、类型信息（<code>ob_type</code>），以及变长对象的长度（<code>ob_size</code>）之外，剩下的只有<code>ob_item</code>，和 <code>allocated</code>，<code>ob_item</code>是真正存放列表元素容器的指针，专门有一块内存用来存储列表元素，这块内存的大小就是allocated所能容纳的空间。allocated是列表所能容纳的元素大小，而且满足条件：</p><ul><li><strong>0 &lt;&#x3D; ob_size &lt;&#x3D; allocated</strong></li><li><strong>len(list) &#x3D;&#x3D; ob_size</strong></li><li><strong>ob_item &#x3D;&#x3D; NULL 时 ob_size &#x3D;&#x3D; allocated &#x3D;&#x3D; 0</strong></li></ul><p><img src="/images/python_pyobject.png"></p><h3 id="内存计算"><a href="#内存计算" class="headerlink" title="内存计算"></a>内存计算</h3><ul><li><code>PyObject_VAR_HEAD: 24字节</code></li><li><code>ob_item: 二级指针, 8字节</code></li><li><code>allocated: 8字节</code><br><strong>在计算列表大小的时候，ob_item指向的指针数组也要算在内。所以：一个列表的大小 &#x3D; 40 + 8 * 指针数组长度<code>(或者列表容量)</code></strong><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs hsp"><span class="hljs-meta"># 显然一个空数组占<span class="hljs-number">40</span>个字节  </span><br><span class="hljs-keyword">print</span>([].__sizeof__()) <span class="hljs-meta"># <span class="hljs-number">40</span>  </span><br><span class="hljs-meta"># <span class="hljs-number">40</span> + <span class="hljs-number">3</span> * <span class="hljs-number">8</span> = <span class="hljs-number">64</span>  print([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;x&quot;</span> * <span class="hljs-number">100</span>].__sizeof__())   # <span class="hljs-number">64</span>  </span><br><span class="hljs-meta"># 虽然里面有一个长度为<span class="hljs-number">100</span>的字符串，但我们说列表存放的都是指针, 所以大小都是<span class="hljs-number">8</span>字节  </span><br><span class="hljs-meta"># 注意: 我们通过l = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]这种方式创建列表的话  </span><br><span class="hljs-meta"># 不管内部元素有多少个, 其ob_size和allocated都是一样的  </span><br><span class="hljs-meta"># 那么列表什么时候会扩容呢? </span><br><span class="hljs-meta"># 答案是在添加元素的时候发现容量不够了才会扩容 </span><br>lst = list(range(<span class="hljs-number">10</span>)) <br><span class="hljs-meta"># <span class="hljs-number">40</span> + <span class="hljs-number">10</span> * <span class="hljs-number">8</span> = <span class="hljs-number">120</span>  </span><br><span class="hljs-keyword">print</span>(lst.__sizeof__()) <span class="hljs-meta"># <span class="hljs-number">120</span>  </span><br><span class="hljs-meta"># 这个时候append一个元素 </span><br>lst.append(<span class="hljs-number">123</span>) <br><span class="hljs-keyword">print</span>(lst.__sizeof__()) <span class="hljs-meta"># <span class="hljs-number">184</span>  </span><br><span class="hljs-meta"># 我们发现大小达到了<span class="hljs-number">184</span>, (<span class="hljs-number">184</span> - <span class="hljs-number">40</span>) <span class="hljs-comment">// 8 = 18, 说明扩容之后申请的底层数据的长度为18</span></span><br></code></pre></td></tr></table></figure></li></ul><h3 id="自动扩容"><a href="#自动扩容" class="headerlink" title="自动扩容"></a>自动扩容</h3><p><strong>列表是会自动扩容的，那么什么时候会扩容呢？我们说列表扩容的时候，是在添加元素时发现底层数组已经满了的情况下才会扩容。换句话说，一个列表在添加元素的时候会扩容，那么说明在添加元素之前，其内部的元素个数和容量是相等的。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Python底层原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>原理解析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编程最佳实践</title>
    <link href="/2022/06/01/python_tools/"/>
    <url>/2022/06/01/python_tools/</url>
    
    <content type="html"><![CDATA[<h2 id="Python最佳实践"><a href="#Python最佳实践" class="headerlink" title="Python最佳实践"></a>Python最佳实践</h2><p>下面我总结了一些在Python开发中比较”Pythonic”的代码。</p><ol><li><p>让代码既可以被导入又可以被执行。<br>if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘:</p></li><li><p>用下面的方式判断逻辑“真”或“假”。<br>if x:<br>if not x:</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>PEP8</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
